# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DMi-wOpab-VIKvuyR70hqEzq7JqZ6sYM
"""

# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime

st.set_page_config(page_title="Analytics Pro", page_icon="üìä", layout="wide")

# Fun√ß√µes de processamento mantidas do c√≥digo original
def is_datetime_column(series):
    if pd.api.types.is_datetime64_any_dtype(series):
        return True

    col_name = series.name.lower()
    date_keywords = ['date', 'time', 'hora', 'dia', 'ano', 'mes']
    if any(keyword in col_name for keyword in date_keywords):
        try:
            pd.to_datetime(series)
            return True
        except:
            return False
    return False

# ============ Configura√ß√£o da Sidebar ============
with st.sidebar:
    st.title("üìä Analytics Pro")
    st.header("Configura√ß√µes")
    uploaded_file = st.file_uploader("Carregue seu arquivo CSV", type="csv")

    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file)
            st.success("Arquivo carregado com sucesso!")
            st.session_state['df'] = df
        except Exception as e:
            st.error(f"Erro ao ler arquivo: {e}")
    else:
        st.info("Por favor, carregue um arquivo CSV")
        if 'df' in st.session_state:
            del st.session_state['df']

# ============ P√°gina Principal ============
if 'df' not in st.session_state:
    st.markdown("""
    ## Bem-vindo ao Analytics Pro!
    Um sistema completo para an√°lise explorat√≥ria de dados
    1. Carregue seu CSV usando o menu lateral
    2. Explore as estat√≠sticas descritivas
    3. Analise as visualiza√ß√µes autom√°ticas
    """)
    st.image("https://i.imgur.com/7kMk3Zz.png", width=400)
else:
    df = st.session_state['df']

    # ============ Se√ß√£o de Estat√≠sticas ============
    st.header("An√°lise Explorat√≥ria")

    with st.expander("üìã Vis√£o Geral dos Dados"):
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de Registros", len(df))
        with col2:
            st.metric("Total de Colunas", len(df.columns))

        st.subheader("Primeiras Linhas")
        st.dataframe(df.head())

    with st.expander("üìà Estat√≠sticas Descritivas"):
        st.subheader("Tipos de Dados")
        st.write(df.dtypes.astype(str))

        st.subheader("Valores Faltantes")
        missing = df.isnull().sum()
        st.bar_chart(missing[missing > 0])

        st.subheader("Estat√≠sticas Num√©ricas")
        st.write(df.describe())

    # ============ Visualiza√ß√µes ============
    st.header("Visualiza√ß√µes Inteligentes")

    # Processamento de datas
    datetime_cols = [col for col in df.columns if is_datetime_column(df[col])]

    # Gr√°ficos Temporais
    if datetime_cols:
        date_col = st.selectbox("Selecione coluna temporal", datetime_cols)

        try:
            df[date_col] = pd.to_datetime(df[date_col])
            df['__temp_date__'] = df[date_col].dt.floor('D')

            st.subheader(f"An√°lise Temporal: {date_col}")
            tab1, tab2 = st.tabs(["S√©rie Temporal", "Distribui√ß√£o Temporal"])

            with tab1:
                freq = st.radio("Frequ√™ncia", ["Di√°ria", "Mensal"], horizontal=True)
                if freq == "Di√°ria":
                    temp_df = df['__temp_date__'].value_counts().sort_index()
                else:
                    temp_df = df.groupby(df[date_col].dt.to_period('M')).size()
                    temp_df.index = temp_df.index.to_timestamp()

                st.line_chart(temp_df)

            with tab2:
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("Distribui√ß√£o por Hora")
                    df['__hour__'] = df[date_col].dt.hour
                    st.bar_chart(df['__hour__'].value_counts())

                with col2:
                    st.subheader("Distribui√ß√£o por Dia da Semana")
                    df['__weekday__'] = df[date_col].dt.weekday
                    st.bar_chart(df['__weekday__'].value_counts())

            del df['__temp_date__'], df['__hour__'], df['__weekday__']
        except Exception as e:
            st.error(f"Erro na an√°lise temporal: {e}")

    # Gr√°ficos Num√©ricos
    numerical_cols = df.select_dtypes(include=np.number).columns.tolist()
    if numerical_cols:
        st.subheader("Distribui√ß√£o Num√©rica")
        num_col = st.selectbox("Selecione coluna num√©rica", numerical_cols)

        col1, col2 = st.columns(2)
        with col1:
            fig, ax = plt.subplots()
            sns.histplot(df[num_col], kde=True, ax=ax)
            st.pyplot(fig)

        with col2:
            fig, ax = plt.subplots()
            sns.boxplot(x=df[num_col], ax=ax)
            st.pyplot(fig)

    # Gr√°ficos Categ√≥ricos
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    if categorical_cols:
        st.subheader("An√°lise Categ√≥rica")
        cat_col = st.selectbox("Selecione coluna categ√≥rica", categorical_cols)

        top_n = st.slider("Mostrar top N valores", 5, 20, 10)
        counts = df[cat_col].value_counts().nlargest(top_n)

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x=counts.values, y=counts.index, ax=ax)
        plt.title(f'Top {top_n} Valores em {cat_col}')
        st.pyplot(fig)

    # Mapa de Calor de Correla√ß√£o
    if len(numerical_cols) > 1:
        st.subheader("Correla√ß√µes Num√©ricas")
        fig, ax = plt.subplots(figsize=(12, 8))
        mask = np.triu(np.ones_like(df[numerical_cols].corr(), dtype=bool))
        sns.heatmap(df[numerical_cols].corr(), annot=True, fmt=".2f",
                    cmap='coolwarm', mask=mask, ax=ax)
        st.pyplot(fig)